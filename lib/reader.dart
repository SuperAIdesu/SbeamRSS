import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:flutter_html/style.dart';

const kHtml = '''
<p id="ss-P-1579053304364">在 2019 年的少数派 <a href="https://sspai.com/page/2019" target="_blank" class="insert-link">年度盘点</a> 中，我们将「学会自动化魔法，少做无用功」作为一条能够帮你提高效率的年度建议。去年我们做了不少与自动化相关的内容和选题，但自动化对大多数用户而言依然有着不小的距离感。</p><p id="ss-P-1579053304364">因此在这篇文章中，我们请来少数派的作者和编辑分享他们的 Tasker 使用经验，希望能够消除你对 Tasker 这款自动化工具的抵触，更好地拥抱效率生活。</p><h2>@Daha：解放生活里的「不自由」</h2><p>🔗 <a href="https://sspai.com/u/6aqo224h/posts" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">查看 TA 的作品</a></p><p>任务自动化最迷人的一点在于，当一切配置安顿好之后，只需要少许触发条件，「机器人」就悄悄地帮你完成了一切。你可能甚至意识不到它们的发生，自然而美好。</p><p>Tasker 作为 Android 平台上最优秀的任务自动化软件之一，可以帮助我们充分利用手机潜能（比如各类传感器），检测当前所处的状态并判断我们的意图，从而完成任务。从使用者的角度出发，我们甚至无需编写程序就能直接通过内置的交互界面做好任务配置。</p><p>下面展开讲讲我自己在用的几个常用配置：</p><h3><a></a>播放音乐</h3><p>非常简单也令人愉悦的配置：「当连接上指定的蓝牙设备时，开始播放音乐」。我主要使用的音乐播放设备是 Airpods 和蓝牙小音箱。戴上 AirPods、AirBattery 检测到后帮它连上蓝牙、音乐自然地流淌出来，音量正合适。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/69d2185ca0aee2ff147ea39c3c921ae5.jpg" alt="" width="450"><figcaption class="ss-image-caption">媒体音量调节</figcaption></figure><p>我有睡前戴耳机聆听音乐入睡的习惯，因为夜深人静，这个时候只需要很低的音量。所以我引入了这样的 Tasker 配置：「到了睡觉时间，调低媒体音量，30分钟后静音、终止音乐软件播放」。</p><h3><a></a>睡眠记录</h3><p>说到睡眠，睡眠时间记录也是一个常用的场景。这里配合了 NFC 标签的使用，我把 NFC 标签贴在床头，每当到了睡觉时间 Tasker 唤起 NFC ，将手机靠近标签，这时 Tasker 里提前定义好的「入睡时间」变量便会记录下此刻的时间；早上清醒之后，再打一次卡，记录「起床时间」变量，后台计算出睡眠时间后，告诉我晚上睡了多久，是否满 8 个小时。同时添加一条记录到「睡眠记录」文件，每个周五的时候提醒我查看这周的睡眠状况。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/d99daf1eda8de480d098b78cfbaddc7a.jpg" alt="" width="450"><figcaption class="ss-image-caption">睡眠记录与睡眠报告</figcaption></figure><p>仅仅使用了一些变量，就可以轻松记录睡眠。最重要的是，配合 NFC 标签这一物理打卡器，一般不会出现忘记的情况。</p><h3><a></a>签到打卡</h3><p>这个功能需要配合&nbsp;<a href="https://sspai.com/app/Nova%20Launcher" target="_blank" class="insert-link">Nova Launcher</a>&nbsp;启动器的 Swipe Up 和&nbsp;<a href="https://play.google.com/store/apps/details?id=com.joaomgcd.autoinput&hl=en_US" target="_blank" class="insert-link">AutoInput</a>&nbsp;软件。Nova Launcher 的 Swipe Up 支持软件图标上滑触发 Tasker 任务。所以我配置了上滑图标自动签到相关软件，Tasker 负责打开软件，AutoInput 负责自动完成点击任务。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/9167883be543fc43e796a60a1638fe23.jpg" alt="" width="450"><figcaption class="ss-image-caption">网易云自动签到</figcaption></figure><p>还有一些简单的小任务：步数达到一个阈值时，晚些时候提醒拉伸放松；到家离家时问候以及提醒待办事项；电源不足提醒充电，充满电时提醒完成；打开 Instapaper 时启动横屏支持（本人的阅读习惯）；话费不足时打开充值界面……</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/016a151f7d0ebcc0e4e600cdeecf6a30.jpg" alt="" width="450"><figcaption class="ss-image-caption">Instapaper 的自动横屏支持</figcaption></figure><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/de66f6a40d268ef40bd31ed2e3a14d25.jpg" alt="" width="450"><figcaption class="ss-image-caption">步数统计提醒</figcaption></figure><p>总之，Tasker 解放了一切不自由，发挥你的想象力使用它吧！</p><p><span app-id="15037" contenteditable="false" class="ss-loading"></span><br></p><h2><a></a>@Fairyex：自动化也能很「好看」</h2><p>🔗 <a href="https://sspai.com/u/hmy9ayji/posts" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">查看 TA 的作品</a></p><p>我从很早之前就开始使用 Tasker 了，在少数派的首篇文章也正是我自己使用 Tasker 一天的分享。</p><p><b>关联阅读：</b><a href="https://sspai.com/post/39792" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">Tasker - 我与拥有它的生活方式</a></p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/fairyex/20200109/QfCQmhi1dz6y.png" alt=""><figcaption class="ss-image-caption">当时的文章截图</figcaption></figure> <p>之后工作和学习上的需求不断新增，我在手机上制作的 Tasker 任务数量越来越多，复杂程度也越来越高。对比上一篇文章发表的时候，我惊奇地发现我制作的任务不仅拥有了更好看的 UI，而且已经能够完全覆盖生活和工作的方方面面。</p><p>于是在今年的 Power+ 中我用多篇文章给大家分享了自己探索的包括如何使用网络 API 来实现自动记录时间、如何利用读取 NFC 来实现物品管理等各种 Tasker 高级技巧与 Tasker 不断更新新版本后带来的新玩法，也在《<a href="https://sspai.com/post/56730" target="_blank" class="insert-link">Power+ 奏折 40</a>》的桌面分享栏目中分享了自己目前任务的 UI 变化与新的任务，感兴趣的朋友也可以看看这篇文章。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/fairyex/20200109/q8dFevcKU0ea.png"><figcaption class="ss-image-caption">更新的任务</figcaption></figure><p>上面提到我所制作的任务已经能够覆盖到生活工作的各种方面，其实主要是以下 6 个方面：</p><ol><li>日常生活信息获取展示：天气、新闻、股票贵金属价格等实时信息获取，自己的快递、话费流量、单词本单词、每月收入支出等记账数据，应用使用时间等数据显示。</li><li>日常生活记录：时间自动记录、物品收纳管理、快速自动记账、习惯打卡自动记录、与 NFC 芯片联动等。</li><li>社交与工作信息的获取展示：自动获取各平台粉丝、文章阅读量点赞数、视频播放量等数据并展示，自动过滤每周自己不需要阅读的 RSS 文章，遇到感兴趣的文章自动分享到 Trello/Notion 等。</li><li>工作信息的处理：每次开会前将所有人的选题都集中通过 Tasker 处理一遍，自动生成负责人标签等数据并导入到 Notion 里。对本周文章用 Tasker 自动收集阅读量点赞数等数据，并结合所有人的评分来给出最终每篇文章的分数，方便大家文章互评。</li><li>文章处理：我在 Tasker 里面专门创建了一个项目，用来存放文章处理相关的任务，这些任务帮助我写文章的时候飞速提升效率。比如可以自动拼接图片并上传到特定的图床，自动将文章里面特定的图片或者其他类型的占位符替换成上传完成的图床链接和其他的 HTML 代码等，甚至现在正在做能够检查文章拼写错误和语法的 Tasker 任务。</li><li>其他高级任务：今年我还在 Tasker 上尝试了更加复杂的任务类型，如涉及到人工智能或者自然语言处理（NLP）的任务，比如利用自然语言处理结合地图快递 API 实现快递到达时间预估，利用人工智能综合开奖数据以及热门数字来预测彩票下一期结果等。</li></ol><p>除此以外，我还帮助很多人制作了不同行业上使用的 Tasker 任务，比如营销行业的消息通知过滤提取与舆情邮件通知、房地产行业的房地产信息筛选报表，和特定房产推送通知甚至自动营销等都可以通过 Tasker 更加方便快捷实现。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/fairyex/20200109/MoetyjQ30p4L.png"><figcaption class="ss-image-caption">部分任务列表</figcaption></figure><p>总而言之，限制 Tasker 能力的只有我们自己的想象力。</p><p>从上面相关文章的图片中大家可能也会发现，我制作自动化任务的时候非常注重 UI（或者说用户体验）——的确有很多任务，我在设计制作界面上花的时间比实现功能更多，既然 Tasker 给了我们创造自己界面的自由，那么我们就要好好利用它。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/fairyex/20190920/HTDxG7op2drI.gif"><figcaption class="ss-image-caption">快递预测</figcaption></figure><p>我建议大家在开始接触 Tasker 了解简单功能的同时也可以接触一下应用本身提供的「场景」功能，用户创建场景后，可以使用 Tasker 提供的高自由度与丰富的组件类型来打造自己的界面，也可以给组件联动展示变量数据或者添加点击等触发事件，拥有自己打造的漂亮界面的成就感与体验是一个个操作叠起来最后单纯的靠对话框或者提示输出结果所比不了的。</p><p>所有的自动化应用都是为了解决你的设备在你满足设定的条件时自动运行你想要的动作这个需求的，而我可以说 Tasker 是其中的佼佼者，<b>因为它最大的优点是拥有不同能力和不同级别需求的人群都能够在上面找到合适自己的入手角度和难度曲线</b>。</p><p>为了某个小功能即装即用、直接导入别人做好的配置、不 Root 的情况下打造自己的任务、Root 设备之后打造自己的任务、甚至 Root 之后加上插件、本身不会编程和本身会编程……这些人群都能使用 Tasker 在自己的能力内，通过短时间学习找到制作符合自己需求任务的途径。这主要得益于 Android 开放的系统与热情的开发者们（虽然 Android 最近几个版本权限已经收紧到能和 iOS 一较高下的程度， Google 还是在 Play 日益严格的审核条件下给 Tasker 开了小灶以保持它的开放性），无论你只是想要在插入耳机时自动播放音乐，还是想要每天定时用 Python 结合机器学习分析预测黄金涨跌然后自动在支付宝上买入卖出，都能利用 Tasker 轻便地完成。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/fairyex/20200109/FV4QRg6RaUJr.png"><figcaption class="ss-image-caption">Tasker 场景搭建和利用本地网页构建场景</figcaption></figure> <p>最后已经有很多人询问我付费教程的问题，为了解决大家不知道怎么轻松快速上手 Tasker，同时给大家分享更多我玩过用过的高级技巧，最近我会在少数派推出 Tasker 的入门与提高教程（起了个名字《Tasker 从入门到精通：打造真正的智能手机》，大家有更好听的也可以评论分享下），拥有教你如何快速上手和了解 Tasker 的基本内容操作，如何思考与实现常用的任务，又是如何利用 Tasker 实现更多高级操作等内容，包括：</p><p></p><ul><li>各种插件的使用</li><li>有编程基础的人如何在 Tasker 上运行各种语言</li><li>Tasker 如何与软（自己编写的应用、第三方工具）、硬（电脑，智能穿戴设备）件设备交互</li><li>……</li></ul><p></p><p>感兴趣的朋友可以持续关注我的主页。</p><h2><a></a>@Clyde：在摸索和试错中上手</h2><p>🔗 <a href="https://sspai.com/u/clyde/posts" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">查看 TA 的作品</a></p><p>因为 Tasker 相对复杂、看上去有些距离的交互界面，我在使用 Android 设备的这几年时间里曾经好几次想要尝试这款自动化工具，但每次都在下载、安装后对着「熟悉而陌生」的主界面茫然无措。</p><p>2019 年发布的 Android 10 成为了一次契机。当时下定决心入坑 Tasker 的目的很简单：我想要一个更智能的自动暗色主题，弥补原生 Android 10 还没有这一设置的缺憾。好在在 Tasker 更新加入暗色主题支持的同时开发者也放出了一套近乎无脑的配置方案，直接导入即可使用。</p><p>借着这套导入的方案，我第一次认真研究起了 Tasker 这款工具：配置文件、任务、场景和变量分别对应了「触发条件」与「执行任务」中的哪些要素？如何在定制 ROM 中找到特定设置所对应的数值变化？任务编辑的过程中又是如何对变量进行赋值的？</p><p>在对开发者给出的模板配置进行拆解、调整和试错后，我算是完成了此前一直都没有勇气迈出的第一步。基于这套配置，我将自己的自动化暗色主题配置过程分享在了 <a href="https://sspai.com/post/56905">这篇文章</a> 里。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/43c634715968f37d2c149ff17c237ad1.png" alt="" width="450"><figcaption class="ss-image-caption">根据日落、日出时间自动开启、关闭的暗色主题</figcaption></figure><p>有了探索自动暗色主题切换的经验，我在之后的时间里也越来越多地尝试用 Tasker 解决日常生活中遇到的实际需求和问题，比如每天都要「走一遍」的睡前流程：</p><blockquote><p>手机连上充电器放在枕边、关闭睡觉期间用不上的息屏显示（AOD）、开启飞行模式、打开蓝牙和 Wi-Fi、启动 Sleep as Android 开始睡眠追踪……</p></blockquote><p>接触 Tasker 前我日复一日地重复着上面这个流程，从来没有思考过如何让它变得更简单：在我目前在用的配置方案中，我将<strong>时间段</strong>（每天晚上 12:00 至次日凌晨 3:00）和<strong>充电器状态</strong>（AC 交流充电）这两种状态作为睡眠追踪的触发条件，两个条件同时满足的前提下自动触发一系列后续任务，包括关闭息屏显示、开启飞行模式但保留 Wi-Fi 和蓝牙连接、将勿扰模式设定为「仅限闹钟」等等，最后借助 Sleep as Android 内建的 Tasker 接入，开始使用手环辅助进行睡眠追踪。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/36c73238cd8ac2bd68e23f56e2e82e0e.png" alt=""><figcaption class="ss-image-caption">睡眠追踪配置方案</figcaption></figure><p>除了睡眠追踪，很多生活中需要重复、机械地进行手动切换的操作我都交给了 Tasker，比如网络切换：在连接到家里 Wi-Fi 时关闭某个「网络加速器」，在离开家、与家里的 Wi-Fi 断开后则自动启用这个「网络加速器」。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/360ce97fd40a2db30ad931e8007b8abe.png" alt="" width="450"><figcaption class="ss-image-caption">这种简单的小配置可以省下不少时间</figcaption></figure><p>而这些简单却实用的配置几乎都来源于最初对 Android 10 自动暗色主题的探索：理清自己的需求，分离触发条件与具体任务，然后通过对 Tasker 和第三方工具提供的接口进行摸索、试错，调校出一套适合自己的配置方案。有了实际要解决的问题之后，Tasker 显然没有我想象中的那么遥远。 </p><h2><a></a>@PeggyLv：专注需求，可繁可简</h2><p>🔗 <a href="https://sspai.com/u/5isr02uh/posts" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">查看 TA 的作品</a></p><p>我接触 Tasker 的时间已经有四年了，说来惭愧，时至今日我还是一个彻头彻尾的小白。</p><p>初识 Tasker 时，我也曾绞尽脑汁地设想过哪些场景能够自动化，甚至一度沉迷于在网络上搜索各种 Tasker 教程。当然最后教程看了不少，付诸实施的却没有几个，究其原因无非是没有发现自己的需求是什么，以至于教程看不懂也缺乏动力学习。</p><p>好在 Tasker 对于新手还算友好，内置的大部分触发条件摸索一下也能理解其含义，找到自己的真实需求后，便可以一步一步上手。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/f0b850926fce48ef7494e10bd02c83cc.png" alt=""><figcaption class="ss-image-caption">我的配置文件与任务</figcaption></figure><p id="ss-P-1579057045682"><b>这里不妨从最简单的夜间模式说起</b>：几年前的 Android 系统尚且不能实现自动开启夜间模式，于是「晚上自动调整亮度到最低，次日恢复」便成了我的第一个需求。围绕这一需求，我在 Tasker 当中设置了以固定时间点为触发条件的动作：晚上 10 点自动调整亮度到最低，次日 7 点恢复。接着，我又发现晚上的时候各类通知铃声过于扰人，因此，这个动作加长到了「<b>晚上 10 点亮度最低+手机开启静音模式+媒体音量调整为两格</b>」。</p><p id="ss-P-1579057045682">在 Google 为 Android 带来暗色模式后，我的动作也随之进行了扩展，Tasker 的优秀之处就在于开发者会不断地为它加入适应当前系统的新特性，以满足使用者不断增长的需求。当然，比起&nbsp;<a href="https://sspai.com/post/56905" target="_blank" class="insert-link">这篇文章</a>&nbsp;当中的实现方式，我的思路还是过于简单了，有需要的朋友可以尝试一下文章当中更为高阶的方式。</p><p id="ss-P-1579057045682"><b>对于系统相对原生的用户而言，短信验证码复制也是个颇为实际的需求</b>。如果你和我一样对于自动化一窍不通，听到「正则表达式」、「脚本」等名词一头雾水，也不必要担心玩不转 Tasker。Tasker 允许用户分享已经设置好的配置，我们可以通过他人分享的文件乃至链接下载现成的配置。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/457b2df8c9d30db564a4c9fff0df6fa7.jpg" alt="" width="450"><figcaption class="ss-image-caption">短信验证码复制</figcaption></figure><p id="ss-P-1579057045682">通过酷安的评论区，我下载了热心网友分享的「短信验证码自动复制」这一配置，当短信当中含有验证码时，Tasker 会自动识别并复制验证码到剪切板，这对于使用类原生系统的我来说省事不少。</p><p>最后，由于在实际的手机使用过程中我经常会遇到插上耳机后还要特意去翻找音乐或视频应用的情况，因此为了省去翻找这一步骤，<b>我利用 Tasker 内置的场景功能制作了一个小弹框</b>。 </p><p>当检测到插入耳机或者连接到我的蓝牙耳机就自动弹出选择框，方便我从常用的影音应用中选择自己想要的一个，单击 Spotify 图标打开 Spotify，长按则打开自带的音乐应用聆听本地音乐；单击 Netflix 图标打开 Netflix，长按则打开 Bilibili。当然，有时候我在插入耳机之前可能就已经打开了相应的应用，那么点击弹框的中间空白部分即可让弹框消失。事实上我们还可以为相应的图标位置添加双击操作，不过考虑到我实际上没有那么多应用需要用到耳机，也就不必要徒增记忆负担。</p><figure tabindex="0" draggable="false" class="ss-img-wrapper custom-width" contenteditable="false"><img src="https://cdn.sspai.com/2020/01/15/67b7e35a78a9ab0767297de20ee08a80.jpg" alt="" width="450"><figcaption class="ss-image-caption" contenteditable="true">自制的媒体服务选择弹窗</figcaption></figure><p>这一弹框现在也变成了我检测自己耳机有没有插好或者连接成功的标志。那么这一土制的场景有没有缺陷呢？当然有，并且很大——横屏必崩，相信 Tasker 内一定有设置的方法，但是正如前文所说：我是小白，够用就好。</p><p>打开我手机上的 Tasker 后，只有寥寥几个动作，但是诸如插入耳机自动降低音量、回到家中自动连接自家 WiFi 这些细碎的事情都不再需要手动进行，我也渐渐习以为常，不必担心晚上粗心忘记开启静音被通知吵醒，也不必担心早上忘记打开 WiFi 而错过重要通知。</p><p>得益于 Tasker 的可繁可简，我们可以动动手就制造出实用的自动化动作，如今我已经不再执着于要将 Tasker 发挥出最大的价值，也不再艳羡大佬们各式各样的神奇操作。明白自己的需求是什么，动手调一调去实现就够了。</p><hr><p>你是如何使用 Tasker 的，它又为你的生活带来了哪些改变？如果你在尝试 Tasker 的过程中遇到了问题，也欢迎在这篇文章的评论区留言交流。</p><p>题图来自 <a href="https://pixabay.com/illustrations/developer-programmer-technology-3461405/" target="_blank" class="insert-link" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px; font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit;">Pixabay</a></p><p><span app-id="1772" contenteditable="false" class="ss-loading"></span><br></p><p><b>关联阅读：</b></p><ul><li><p><a href="https://sspai.com/post/57683" target="_blank" class="insert-link">Tasker 的新「杀手锏」功能：Logcat Entry</a></p></li><li><p><a href="https://sspai.com/post/45759" target="_blank" style="font-style: inherit; font-variant-ligatures: inherit; font-variant-caps: inherit; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: 16px;">Tasker：Android 上的自动化标杆</a></p></li><li><p><a href="https://sspai.com/post/56905" target="_blank" class="insert-link">如何让 Android 10 拥有不输 iOS 的暗色模式体验？</a><br></p></li></ul><p>&gt; 下载少数派 <a href="https://sspai.com/page/client">客户端</a>、关注 <a href="https://sspai.com/s/J71e">少数派公众号</a> ，玩转 Tasker 没那么难 🐱‍🏍</p><p>&gt; 特惠、好用的硬件产品，尽在 <a href="https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc">少数派sspai官方店铺</a> 🛒</p><p><br></p>
''';

class ReaderScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(
      title: Text('Readerscreen', style: Theme.of(context).textTheme.title),
    ),
    body: ListView(
      children: <Widget>[
        Html(
          data: kHtml,
          onLinkTap: (url) => showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: Text('onTapUrl'),
              content: Text(url),
            ),
          ),
          style: {
            "html": Style(
              backgroundColor: Theme.of(context).backgroundColor,
            ),
            "p": Style(
              fontSize: FontSize.larger,
              fontFamily: 'serif'
            ),
          },
        ),
      ],
    )
  );
}